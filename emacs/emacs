(setq display-time-day-and-date t)
(setq display-time-24hr-format)
(display-time)

;;;禁止ecb启动提示
(setq ecb-tip-of-the-day nil)
;;支持ecb里使用鼠标
'(ecb-primary-secondary-mouse-buttons (quote mouse-1--C-mouse-1))
;;Semantic-settings
'(semantic-default-c-setup)

;; flycheckz
(add-hook 'after-init-hook #'global-flycheck-mode)

;;;加载cscope
;;(require 'xcscope)

;;设置行宽
(setq fill-column 80)
(setq auto-fill-mode t)

(setq time-stamp-start "最后更新时间:[   ]+\\\\?")
(setq time-stamp-end: "\n")
(setq time-stamp-format: "%:y年%:m月%:d日")

;; 为什么总是问yes或是no
(fset 'yes-or-no-p' y-or-n-p)

;; 显示列号
(setq column-number-mode t)
(setq line-number-mode t)

;; 高亮显示拷贝区域
(transient-mark-mode t)

;; 交互式粘贴
(setq x-select-enable-clipboard t)

;; 语法高亮
(global-font-lock-mode 1)

;; 自动显示图片
(auto-image-file-mode)

;; 光标靠近指针时，指针自动让开
(mouse-avoidance-mode 'animate)

;; 显示匹配的括号
(show-paren-mode t)

;; 去掉工具条
(tool-bar-mode -1)

(add-to-list 'load-path "~/.emacs.d/list/")
;;(add-to-list 'load-path "/usr/share/emacs24/site-lisp/")

;; add git
(require 'git)

(require 'package)
(package-initialize)
(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                         ("marmalade" . "https://marmalade-repo.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))


;;;; go mode
;;(require 'go-mode-load)
;;
;;;; gofmt
;;(add-hook 'before-save-hook 'gofmt-before-save)
;;
;;;;
;;(add-hook 'go-mode-hook (lambda ()
;;                          (local-set-key (kbd "C-c C-r") 'go-remove-unused-imports)))
;;;; gomode

(add-to-list 'load-path "~/.emacs.d/lisp/")
(require 'go-autocomplete)

;; buffer move
(require 'buffer-move)
;; delete trailling space
(setq delete-trailing-lines nil)
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;;中文环境中使用ispell
(setq-default ispell-program-name "aspell")
(setq-default ispell-local-dictionary "american")
(global-set-key (kbd "") 'ispell-complete-word)

(setq-default abbrev-mode t)
(read-abbrev-file "~/.abbrev_defs")
;;(read-abbrev-file "~/.emacs.d/msf-abbrev.el")
(setq save-abbrevs t)

;;输入密码时不明文显示
(add-hook 'comint-output-filter-functions
		  'comint-watch-for-password-prompt)

;;欧洲时间显示 天/月/年(DD/MM/YYYY)
(setq european-calendar-style 't)

;;显示今天的安排
(diary)

;; key for macosx terminal
(setq x-alt-keysym 'meta)

;font-configure
(set-default-font "-bitstream-Bitstream Vera Sans Mono-normal-normal-normal-*-22-*-*-*-m-0-iso10646-1")
;(add-to-list 'default-frame-alist '(font . "DejaVu Sans Mono-16"))

(prefer-coding-system 'utf-8)
(setq default-buffer-file-coding-system 'utf-8)

(require 'color-theme)
(color-theme-initialize)
(setq color-theme-is-global t)
;;(color-theme-deep-blue)

;; 禁止响铃
(setq visible-bell nil)
;; 启动界面
;; 关闭splash-screen
(setq inhibit-splash-screen t)
;关闭startup-screen
(setq inhibit-startup-message t)

;tab
(setq indent-tabs-mode nil)
(setq default-tab-width 4)
(setq tab-width 4)

;显示行号
(set-scroll-bar-mode nil); no scroll bar, even in x-window-system
;;(require 'wb-line-number)
;;(wb-line-number-toggle)
;;(wb-line-number-enable)
(global-linum-mode t)
(setq linum-format "  %d ")

                                        ;当文件名以相应的字符结尾时自动打开相应模式
(setq auto-mode-alist
      (append '(("\\.cpp$" . c++-mode)
                ("\\.hpp$" . c++-mode)
                ("\\.plx?$" . cperl-mode)
                ("\\.p6$" . cperl-mode)
                ("\\.py$" . python-mode)
                ("\\.py2$" . python-mode)
                ("\\.py3" . python-mode)
                ("\\.[sS]$" . asm-mode)
                ("\\.lsp$" . emacs-lisp-mode)
                ("\\.lisp$" . emacs-lisp-mode)
                ("\\.txt$" . text-mode)
                ("\\.hs$" . haskell-mode)
                ("\\.go$" . go-mode)
                ("\\[^\.$]" . text-mode)
                ("\\.lua$]" . lua-mode)
                )
              auto-mode-alist))


;; 外观

'(browse-url-mozilla-program "firefox")


;function
(defun my-insert-date()
  (interactive)
  (insert (user-full-name))
  (insert "@")
  (insert (format-time-string "%Y/%m/%d %H:%M:%S" (current-time))))
(global-set-key (kbd "C-c m d") 'my-insert-date)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(truncate-partial-width-windows nil))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

(defun count-words-buff ()
  "Count the number of words in the current-buffer;
print a message in the minibuffer with the result."
  (interactive)
  (let ((count 0))
	(save-excursion
	  (goto-char (point-min))
	  (while (< (point) (point-max))
		(forward-word 1)
		(setq count (1+ count)))
	  (message "buffer contains %s words." count))))

;; javascript mode
;;(autoload #'espresso-mode "espresso" "Start espresso-mode" t)
;;(add-to-list 'auto-mode-alist '("\\.js$" . javascript-mode))
;;(add-to-list 'auto-mode-alist '("\\.json$" . javascript-mode))
(autoload 'js3-mode "js3" nil t)
(add-to-list 'auto-mode-alist '("\\.js$" . js3-mode))
(add-to-list 'auto-mode-alist '("\\.json$" . js3-mode))



;; org-mode
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
;; flyspell mode for spell checking everywhere
(add-hook 'org-mode-hook 'turn-on-flyspell 'append)

;; load grapphviz
;; add graphviz shortcut
(load-file "~/.emacs.d/lisp/graphviz-dot-mode.el")

;; vline
(defun indent-vline-lisp ()
  (interactive)
  (funcall
   (lambda (x)
     (font-lock-add-keywords
      nil `((,x
             (0 (draw-indent-vline))))))
   "^[ \t]*[,`#'(]")
  (defadvice delete-char (after indent-vline activate compile)
    (save-excursion
      (let* ((p (point))
             (q (skip-chars-forward " "))
             (x (progn (skip-chars-backward " ")(bolp))))
        (if x
            (remove-text-properties p (+ p q) '(display)))))))

(defun indent-vline ()
  (interactive)
  (funcall
   (lambda (x)
     (font-lock-add-keywords
      nil `((,x
             (0 (if (save-excursion
                      (skip-chars-backward " ")(bolp))
                    (let* ((p1 (point))
                           (p2 (1+ p1)))
                      (if (or (null (eq (get-byte p1) 32))
                              (get-text-property p1 'display))
                          nil
                        (draw-indent-tab p1 p2)
                        nil))))))))
   " \\( \\)")
  (defadvice delete-char (after indent-vline activate compile)
    (save-excursion
      (let* ((p (point))
             (q (skip-chars-forward " "))
             (x (progn (skip-chars-backward " ")(bolp))))
        (if x
            (remove-text-properties p (+ p q) '(display)))))))


;; toggle-fullscreen
(defun toggle-fullscreen (&optional f)
  (interactive)
  (let ((current-value (frame-parameter nil 'fullscreen)))
	(set-frame-parameter nil 'fullscreen
						 (if (equal 'fullboth current-value)
							 (if (boundp 'old-fullscreen) old-fullscreen nil)
						   (progn (setq old-fullscreen current-value)
								  'fullboth)))))

(global-set-key [f11] 'toggle-fullscreen)

;; By an unknown contributor
(global-set-key "%" 'match-paren)

(defun match-paren (arg)
  "Go to the matching paren if on a paren; otherwise insert %."
  (interactive "p")
  (cond ((looking-at "\\s\(") (forward-list 1) (backward-char 1))
		((looking-at "\\s\)") (forward-char 1) (backward-list 1))
		(t (self-insert-command (or arg 1)))))

;; Use cperl-mode instead of the default perl-mode
(defalias 'perl-mode 'cperl-mode)

;; Use 4 space indents via cperl mode
(custom-set-variables
 '(cperl-close-paren-offset -4)
 '(cperl-continued-statement-offset 4)
 '(cperl-indent-level 4)
 '(cperl-indent-parens-as-block t)
 '(cperl-tab-always-indent t)
 )

;; expands for keywords such as
(setq cperl-electric-keywords t)
(setq cperl-auto-newline t)

;;
(desktop-save-mode t)

;; disable Ctrl+Space
(global-unset-key (kbd "C-SPC"))

;; copy paste current line
(defadvice kill-ring-save (before slick-copy activate compile)
  "When called interactively with no active region, copy the current line."
  (interactive
   (if mark-active
       (list (region-beginning) (region-end))
     (progn
       (message "Current line is copied.")
       (list (line-beginning-position) (line-beginning-position 2)) ) ) ))

(defadvice kill-region (before slick-copy activate compile)
  "When called interactively with no active region, cut the current line."
  (interactive
   (if mark-active
       (list (region-beginning) (region-end))
     (progn
       (list (line-beginning-position) (line-beginning-position 2)) ) ) ))

(global-set-key (kbd "<f2>") 'kill-region) ; cut.
(global-set-key (kbd "<f3>") 'kill-ring-save) ; copy.
(global-set-key (kbd "<f4>") 'yank) ; paste.

;; auto insert base on file extenstion
(auto-insert-mode)
(setq auto-insert-directory "~/.emacs.d/template/")
;; disable prompted before insertion
(setq auto-insert-query nil)
(define-auto-insert "\.plx" "perl-code-template.pl")
(define-auto-insert "\.pl" "perl-code-template.pl")
(define-auto-insert "\.pm" "perl-module-template.pm")
(define-auto-insert "\.html" "html-template.html")
(define-auto-insert "\.yaml" "yaml-template.yaml")
(define-auto-insert "\.tex" "tex-template.tex")
(define-auto-insert "\.sh" "shell-template.sh")
(define-auto-insert "\.p6" "perl6.p6")
(define-auto-insert "\.go" "go.go")
(define-auto-insert "\.lisp" "lisp.lisp")
(define-auto-insert "\.erl" "erlang.erl")
(define-auto-insert "\.py" "python.py")

;; reset PATH variable
(setenv "PATH"
        (concat
         (getenv "PATH")
         ":/usr/sbin"
         ":/sbin"
         ":/home/vinian/bin"
         ":/usr/local/sbin"
         )
        )

(setenv "GOPATH" "/home/vinian/go")

(setq load-path (cons  "/usr/lib/erlang/lib/tools-2.6.13/emacs"
                       load-path))
(setq erlang-root-dir "/usr/lib/erlang/lib/tools-2.6.13")
(setq exec-path (cons "/usr/lib/erlang/lib/tools-2.6.13/bin" exec-path))
(require 'erlang-start)
(add-to-list 'auto-mode-alist '("\\.erl\\'" . erlang-mode))
(add-to-list 'ac-modes 'erlang-mode)

;; autopair
(require 'autopair)
(autopair-global-mode) ;; to enable in all buffers



;; ruby and rsense
;; Replace $RSENSE_HOME with the directory where RSense was installed in full path
;; Example for UNIX-like systems
(add-to-list 'auto-mode-alist '("\\.rb\\'" . ruby-mode))
(autoload 'ruby-mode "ruby-mode" "Major mode for editing Ruby code" t)
(add-hook 'ruby-mode-hook (lambda () (local-set-key "\r" 'newline-and-indent)))
(require 'inf-ruby)
(require 'ruby-electric)
(add-hook 'ruby-mode-hook
          #'(lambda ()
              (autopair-mode -1)
              (ruby-electric-mode t)))

(require 'ruby-tools)

(defun ruby-insert-end ()
  (interactive)
  (insert "end")
  (ruby-indent-line t)
  (end-of-line))

;;(add-to-list 'load-path "~/.emacs.d/")
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
(ac-config-default)
(ac-set-trigger-key "TAB")
(define-key ac-mode-map (kbd "C-TAB") 'auto-complete)


(setq inferior-lisp-program "/usr/bin/clisp")
(add-to-list 'load-path "/home/vinian/.emacs.d/elpa/slime-20140119.627/")
(require 'slime)
(slime-setup)


(add-to-list 'load-path "~/.emacs.d/el-get/el-get")

(unless (require 'el-get nil 'noerror)
  (with-current-buffer
      (url-retrieve-synchronously
       "https://raw.github.com/dimitri/el-get/master/el-get-install.el")
    (goto-char (point-max))
    (eval-print-last-sexp)))

(add-to-list 'el-get-recipe-path "~/.emacs.d/el-get-user/recipes")
(el-get 'sync)

;;; indeent 2 spaces
(add-hook 'python-mode-hook 'jedi:setup)
(setq jedi:complete-on-dot t)  ; optional
;; Python Hook
;(add-hook 'python-mode-hook '(lambda ()
; (setq python-indent 2)))
;(custom-set-variables
; '(python-guess-indent nil))
(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.yaml$" . yaml-mode))
(add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))


(autoload 'apache-mode "apache-mode" nil t)
(add-to-list 'auto-mode-alist '("\\.htaccess\\'"   . apache-mode))
(add-to-list 'auto-mode-alist '("httpd\\.conf\\'"  . apache-mode))
(add-to-list 'auto-mode-alist '("srm\\.conf\\'"    . apache-mode))
(add-to-list 'auto-mode-alist '("access\\.conf\\'" . apache-mode))
(add-to-list 'auto-mode-alist '("sites-\\(available\\|enabled\\)/" . apache-mode))

(defun single-lines-only ()
  "replace multiple blank lines with a single one"
  (interactive)
  (goto-char (point-min))
  (while (re-search-forward "\\(^\\s-*$\\)\n" nil t)
	(replace-match "\n")
	(forward-char 1)))

(add-to-list 'auto-mode-alist '("\\.jsx\\'" . jsx-mode))
(autoload 'jsx-mode "jsx-mode" "JSX mode" t)


